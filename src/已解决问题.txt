1.xx-servlet.xml 相当于spring中的applicationContext.xml，如果直接使用即无需applicationContext.xml
2.classpath: 对应的就是WEB-INF/classes文件夹，如果找不到文件，可以放在此文件夹下，如jdbc.properties
3.spring自动加载类@Autowired
4.SpringMVC 控制器返回 new ModelAndView("页面名字")对象
5.mybatis配置
              命名空间
<mapper namespace="com.sun.user">
    返回结果类型
	<resultMap id="UserMap" type="com.sun.dao.User">      
		<id property="id" column="id"/> 
		<result property="username" column="username"/> 
	</resultMap> 
  	查询语句，通过 命名空间+id 来辨识
    <select id="getUser" parameterType="int" resultMap="UserMap">
       select * from user where  id=#{id}
    </select>
</mapper>
6.java使用mybatis 
	1.通过spring自动加载 创建sqlSessionFactory
	2.获取session，即sqlSessionFactory.openSession();
	3.session.xxx执行查询
7.可以在spring中托管所有mybatis的操作，即无需Configuration.xml，只需要在spring的sqlSessionFactory中配置即可。（前提是托管时不会有冲突，如bug.txt中的问题，暂未找到解决办法）

8上传项目到github
	1.创建resp。
	2.git clone到本地
	3.将项目copy到git clone到本地的文件夹
	4.git add .  ---将项目传到本地版本库
	5.git commit ---m "备注"
	6.git push -u origin master  ---通过用户名密码登录并上传到master分支
9.json格式数据范例   以及json格式化网站
		http://json.cn/
{
    "directory":[
        {
            "name":"首页",
            "img":"3wb.com",
            "href":"/goPage?pageName=index"
        },
        {
            "name":"联系人",
            "img":"3wb.com",
            "href":"/goPage?pageName=person"
        },
        {
            "name":"工作",
            "img":"3wb.com",
            "href":"/goPage?pageName=work"
        },
        {
            "name":"消息",
            "img":"3wb.com",
            "href":"/goPage?pageName=message"
        }
    ],
    "count":4
}
10.前端json字符串
	1.前端创建数据结构对应对象
	2.stringify(obj) 将对象转为json字符串，传递给服务器端
11.后端使用jackson 创建对象model解析前端json字符串
12.jackson - outMessage 动态模式模版
		//动态拼接返回json数据。并通过jsonGenerator的构造方法设定输出流。
		JsonGenerator jsonGenerator= JsonUtil.getJsonGenerator(response.getOutputStream());
		//{"status":"success","data":{"directory":[{"name":"é¦–é¡µ","img":"jics/images/home.png","href":"index"},{"name":"è”ç³»äºº","img":"jics/images/friend.png","href":"friend"},{"name":"å·¥ä½œ","img":"jics/images/work.png","href":"work"},{"name":"æ¶ˆæ¯","img":"jics/images/msg.png","href":"message"}]},"date":"1460816748331"}
        try {
			jsonGenerator.writeStartObject();//{
				jsonGenerator.writeObjectField("status", "success");
				jsonGenerator.writeObjectFieldStart("data");//data:{
					jsonGenerator.writeArrayFieldStart("directory");//{
						//for
						for(int i=0;i<direcotrys.size();i++){
							jsonGenerator.writeStartObject();
								jsonGenerator.writeObjectField("name", direcotrys.get(i).getName());
								jsonGenerator.writeObjectField("img",  direcotrys.get(i).getImg());
								jsonGenerator.writeObjectField("href",  direcotrys.get(i).getHref());
							jsonGenerator.writeEndObject();
						}
						//for end
					jsonGenerator.writeEndArray();
				jsonGenerator.writeEndObject();                 // }
				jsonGenerator.writeObjectField("date", new Long(System.currentTimeMillis()).toString());
		    jsonGenerator.writeEndObject();  //}
		    jsonGenerator.close();
        } catch (JsonGenerationException e) {
	        // TODO Auto-generated catch block
	        e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
13. jackson 
	1.{}
		jsonGenerator.writeStartObject();//{
    	jsonGenerator.writeEndObject();  //}
    2.[]
		jsonGenerator.writeStartArray();//[
    	jsonGenerator.writeEndArray();  //]
    3.xx:{}
		jsonGenerator.writeObjectFieldStart("xx");//xx:{
		jsonGenerator.writeEndObject();// }
	4.xx:[]
		jsonGenerator.writeArrayFieldStart("xx");//xx:{
		jsonGenerator.writeEndArray();// }
	5."xx":"oo"
		jsonGenerator.writeObjectField("xx", "oo");
		